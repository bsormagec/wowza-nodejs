// Generated by CoffeeScript 1.6.3
(function() {
  var Digest, crypto, url;

  url = require('url');

  crypto = require('crypto');

  Digest = function(username, password, urlString) {
    this.username = username;
    this.password = password;
    this.config = {};
    url = url.parse(urlString);
    this.config.host = url.hostname;
    return this.config.port = url.port;
  };

  Digest.parseHeaders = function(header) {
    var obj;
    obj = {};
    header.substring(7).split(/,\s+/).forEach(function(par) {
      var d;
      d = par.split('=');
      return obj[d[0]] = d[1].replace(/"/g, '');
    });
    return obj;
  };

  Digest.prototype.renderHeaders = function(obj) {
    var d, k, v;
    d = [];
    for (k in obj) {
      v = obj[k];
      d.push("" + k + "=\"" + v + "\"");
    }
    return "Digest " + (d.join(', '));
  };

  Digest.prototype.render = function(path, headers, method) {
    var arp, cnonce, completeHeader, h1, h2, resp, signatures;
    if (method == null) {
      method = 'GET';
    }
    arp = Digest.parseHeaders(headers['www-authenticate']);
    signatures = {
      ha1: "" + this.username + ":" + arp.realm + ":" + this.password,
      ha2: "" + (method.toUpperCase()) + ":" + path
    };
    h1 = crypto.createHash('md5').update(signatures.ha1).digest('hex');
    h2 = crypto.createHash('md5').update(signatures.ha2).digest('hex');
    cnonce = '';
    resp = crypto.createHash('md5').update("" + h1 + ":" + arp.nonce + ":1:" + cnonce + ":auth:" + h2).digest('hex');
    completeHeader = {
      username: this.username,
      realm: arp.realm,
      nonce: arp.nonce,
      uri: path,
      qop: arp.qop,
      nc: '1',
      cnonce: cnonce,
      response: resp
    };
    return headers = {
      Authorization: this.renderHeaders(completeHeader)
    };
  };

  module.exports = Digest;

}).call(this);
